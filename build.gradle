plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
var baseProject = project(":Module-Base")
var depProject = project(":Module-Deprecated-v3")
// 全局设置
allprojects { project ->
    apply plugin: 'java'

    group 'io.github.saukiya'
    version '4.0.0'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    tasks.build.finalizedBy shadowJar
    javadoc.enabled = false

    repositories {
        mavenLocal()
        mavenCentral()
        // Spigot Api
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/releases/' }
        // Paper Api
        maven { url 'https://repo.papermc.io/repository/maven-public/' }
        // MythicMobs
        maven { url "https://mvn.lumine.io/repository/maven-public/" }
        // bStats-bukkit
        maven { url 'https://repo.codemc.org/repository/maven-public' }
        // Github Project
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        if (project != baseProject) {
            implementation baseProject
        }
        compileOnly fileTree('lib')
        compileOnly 'org.projectlombok:lombok:1.18.34'
        annotationProcessor 'org.projectlombok:lombok:1.18.34'
    }
}

configure([rootProject, baseProject, depProject]) {
    dependencies {
        compileOnly 'org.spigotmc:spigot-api:1.21.1-R0.1-SNAPSHOT'
        compileOnly 'commons-lang:commons-lang:2.6'
        compileOnly 'io.lumine.xikage:MythicMobs:4.9.0'
        compileOnly 'io.lumine:Mythic-Dist:5.2.1'
        compileOnly 'com.github.PlaceholderAPI:PlaceholderAPI:2.10.9'
        implementation 'org.bstats:bstats-bukkit:2.2.1'

        //testImplementation project(':Module-NMS-V1_17_R1')
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
        rootProject.configurations.compileOnly.dependencies.each { dependency ->
            if (dependency.name == "unspecified") return
            testImplementation "$dependency.group:$dependency.name:$dependency.version"
        }
    }
    javadoc {
        enabled = true
        options.charSet = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
        options.links 'https://hub.spigotmc.org/javadocs/spigot/'
        destinationDir = file("${buildDir}/docs/javadoc")
        source = files(rootProject.sourceSets.main.allJava, baseProject.sourceSets.main.allJava, depProject.sourceSets.main.allJava)
        classpath = files(rootProject.sourceSets.main.compileClasspath, baseProject.sourceSets.main.compileClasspath, depProject.sourceSets.main.compileClasspath)
    }
}

jar.archiveClassifier = "core"
processResources.expand(version: version, language: "~")
buildCopyTask('buildLatestJar', "$rootDir/build", "Latest")
buildCopyTask('buildDebugJar', "$rootDir/run/plugins", "Debug")

tasks.register('dependencyJar', Jar) {
    from rootProject.sourceSets.main.output.classesDirs
    from baseProject.sourceSets.main.output
    from depProject.sourceSets.main.output
    archiveClassifier = 'api'
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from rootProject.sourceSets.main.allJava
    from baseProject.sourceSets.main.allJava
    from depProject.sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    dependsOn javadoc
    from javadoc.destinationDir
    from zipTree(dependencyJar.archiveFile)
}

shadowJar {
    dependsOn dependencyJar
    // 过滤未使用的依赖
    minimize()
    // bStats重定向
    relocate('org.bstats', 'github.saukiya.sxitem.bstats')
    // 获得子模块的classes文件
    subprojects.each { subProject ->
        from subProject.sourceSets.main.output
    }
}

['de', 'en', 'zh'].each { lang ->
    // 要在shadowJar之前处理资源文件
    tasks.register("processResources($lang)", Copy) {
        dependsOn shadowJar
        from 'src/main/resources'
        into "$buildDir/resources/main.$lang/"
        expand(version: version, language: lang)
    }

    // 要在processResources之后处理build任务
    tasks.register("build($lang)", Jar) {
        group = "build"
        archiveClassifier = "all-$lang"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        dependsOn "processResources($lang)"
        from "$buildDir/resources/main.$lang/"
        from zipTree(shadowJar.archiveFile.get().asFile.path)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact(dependencyJar.archivePath).builtBy dependencyJar
            artifact javadocJar
            artifact shadowJar
            artifact sourcesJar
            artifactId = project.name.toLowerCase()
        }
    }
    repositories {
        if (System.getenv("GITHUB_ACTIONS") != null) {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/saukiya/SX-Item")
                credentials {
                    username = System.getenv("GITHUB_NAME")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        } else {
            mavenLocal()
        }
    }
}

assemble.group = buildDependents.group = buildNeeded.group = jar.group = classes.group = testClasses.group = "build other"

def buildCopyTask(String taskName, String destinationDir, String jarSuffix) {
    tasks.register(taskName, Copy) {
        group = "build"
        dependsOn shadowJar
        from shadowJar.archiveFile.get().asFile.path
        into(destinationDir).rename { "${project.name}-${jarSuffix}.jar" }
    }
}
